package com.example.dbpfinal

import android.os.Bundle
import android.util.Log
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import kotlinx.android.synthetic.main.activity_main.textView
//import com.example.dbpfinal.databinding.ActivityMainBinding
//import kotlinx.android.synthetic.main.activity_main.*
import org.w3c.dom.Document
import org.w3c.dom.Element
import org.w3c.dom.Node
import org.w3c.dom.NodeList
import javax.xml.parsers.DocumentBuilderFactory

var text=""

class MainActivity : AppCompatActivity() {
    //lateinit var binding : ActivityMainBinding;

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        //binding=ActivityMainBinding.inflate(layoutInflater);
        //setContentView(binding.root)

        val button = findViewById<Button>(R.id.button)

        textView.text = ""

        // [태풍예상정보조회] 요청 변수
        // 키 값
        val key = "leuCQS4rjZ3wEEYZP6uJ7YJn%2F%2FHQBMJ2UtecVeGQ7PI3F0gU%2FzOpGukfXrFYPAp5kw9goRwCYpFdeBmRueD%2FKw%3D%3D"
        // 현재 페이지번호
        val pageNo = "&pageNo=1"
        // 한 페이지 결과 수
        val numOfRows ="&numOfRows=10"
        // 발표시각
        val tmFc = "&tmFc=202306090400"
        //태풍번호
        val typSeq = "&typSeq=3"
        // API 정보를 가지고 있는 주소
        val url ="http://apis.data.go.kr/1360000/TyphoonInfoService/getTyphoonFcst?serviceKey="+key+pageNo+numOfRows+tmFc+typSeq

        // 버튼을 누르면 쓰레드 동작
        button.setOnClickListener {
            // 쓰레드 생성
            val thread = Thread(NetworkThread(url))
            thread.start() // 쓰레드 시작
            thread.join() // 멀티 작업 안되게 하려면 start 후 join 입력

            // 쓰레드에서 가져온 api 정보 텍스트에 뿌려주기
            textView.text = text
        }

    }
}

class NetworkThread(
    var url:String): Runnable {
    override fun run() {
        try {
            val xml: Document =
                DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(url)
            xml.documentElement.normalize()

            //찾고자 하는 데이터가 어느 노드 아래에 있는지 확인
            val list: NodeList = xml.getElementsByTagName("item")

            //list.length-1 만큼 얻고자 하는 태그의 정보를 가져온다
            for (i in 0..list.length - 1) {

                val n: Node = list.item(i)

                if (n.getNodeType() == Node.ELEMENT_NODE) {

                    val elem = n as Element

                    val map = mutableMapOf<String, String>()


                    // 
                    for (j in 0..elem.attributes.length - 1) {

                        map.putIfAbsent(
                            elem.attributes.item(j).nodeName,
                            elem.attributes.item(j).nodeValue
                        )

                    }


                    /*
                    println(
                        " [태풍 경보] : ${
                            elem.getElementsByTagName("typName").item(0).textContent
                        }"
                    )
                    text += "[태풍 경보] : ${
                        elem.getElementsByTagName("typName").item(0).textContent
                    } \n"
                    println(
                        " [태풍 경보] : ${
                            elem.getElementsByTagName("typEn").item(0).textContent
                        }"
                    )
                    text += "[태풍 경보] : ${
                        elem.getElementsByTagName("typEn").item(0).textContent
                    } \n"
                     */

                    println("=========${i + 1}=========")
                    text += "${i + 1}번째 태풍 경보 안내 \n"

                    println(
                        "** 안내 : ${
                            elem.getElementsByTagName("fcLocKo").item(0).textContent
                        }"
                    )
                    text += "** 안내 : ${
                        elem.getElementsByTagName("fcLocKo").item(0).textContent
                    } \n"

                    println(
                        "0. 통보문 발표 시각 : ${
                            elem.getElementsByTagName("tmFc").item(0).textContent
                        }"
                    )
                    text += "0. 통보문 발표 시각 : ${
                        elem.getElementsByTagName("tmFc").item(0).textContent
                    } \n"

                    println(
                        "1. 진행 방향 : ${
                            elem.getElementsByTagName("dir").item(0).textContent
                        }"
                    )
                    text += "1. 진행 방향 : ${
                        elem.getElementsByTagName("dir").item(0).textContent
                    } \n"

                    println(
                        "2. 15m/s 예외방향 : ${
                            elem.getElementsByTagName("ed15").item(0).textContent
                        }"
                    )
                    text += "2. 15m/s 예외방향 : ${
                        elem.getElementsByTagName("ed15").item(0).textContent
                    } \n"

                    println(
                        "3. 태풍 분석 시 시간 : ${
                            elem.getElementsByTagName("tm").item(0).textContent
                        }"
                    )
                    text += "3. 태풍 분석 시 시간 : ${
                        elem.getElementsByTagName("tm").item(0).textContent
                    } \n"

                    println("=====================================")

                }
            }
        } catch (e: Exception) {
            Log.d("TTT", "오픈API" + e.toString())
        }
    }
}




# 실행은 됨--
package com.example.dbpfinal

import android.os.Bundle
import android.util.Log
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import kotlinx.android.synthetic.main.activity_main.textView
//import com.example.dbpfinal.databinding.ActivityMainBinding
//import kotlinx.android.synthetic.main.activity_main.*
import org.w3c.dom.Document
import org.w3c.dom.Element
import org.w3c.dom.Node
import org.w3c.dom.NodeList
import javax.xml.parsers.DocumentBuilderFactory

var text=""

class MainActivity : AppCompatActivity() {
    //lateinit var binding : ActivityMainBinding;

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        //binding=ActivityMainBinding.inflate(layoutInflater);
        //setContentView(binding.root)

        val button = findViewById<Button>(R.id.button)

        textView.text = ""

        // [태풍예상정보조회] 요청 변수
        // 키 값
        val key = "leuCQS4rjZ3wEEYZP6uJ7YJn%2F%2FHQBMJ2UtecVeGQ7PI3F0gU%2FzOpGukfXrFYPAp5kw9goRwCYpFdeBmRueD%2FKw%3D%3D"
        // 현재 페이지번호
        val pageNo = "&pageNo=1"
        // 한 페이지 결과 수
        val numOfRows ="&numOfRows=10"

        // 응답 자료 형식
        //val dataTyp = "&dataTyp=XML"
        // 서비스명 = 어플명
        val MobileApp = "&MobileApp=TYPHOON SERVICE"

        val dataType = "&dataType=XML"
        // 발표시각
        val tmFc = "&tmFc=202306090400"
        //태풍번호
        val typSeq = "&typSeq=3"
        // API 정보를 가지고 있는 주소
        val url ="http://apis.data.go.kr/1360000/TyphoonInfoService/getTyphoonInfo?serviceKey="+key+pageNo+numOfRows+tmFc+typSeq

        // 버튼을 누르면 쓰레드 동작
        button.setOnClickListener {
            // 쓰레드 생성
            val thread = Thread(NetworkThread(url))
            thread.start() // 쓰레드 시작
            thread.join() // 멀티 작업 안되게 하려면 start 후 join 입력

            // 쓰레드에서 가져온 api 정보 텍스트에 뿌려주기
            textView.text = text
        }

    }
}

class NetworkThread(
    var url:String): Runnable {
    override fun run() {
        try {
            val xml: Document =
                DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(url)
            xml.documentElement.normalize()

            //찾고자 하는 데이터가 어느 노드 아래에 있는지 확인
            val list: NodeList = xml.getElementsByTagName("item")

            //list.length-1 만큼 얻고자 하는 태그의 정보를 가져온다
            for (i in 0..list.length - 1) {

                val n: Node = list.item(i)

                if (n.getNodeType() == Node.ELEMENT_NODE) {

                    val elem = n as Element

                    val map = mutableMapOf<String, String>()


                    //
                    for (j in 0..elem.attributes.length - 1) {

                        map.putIfAbsent(
                            elem.attributes.item(j).nodeName,
                            elem.attributes.item(j).nodeValue
                        )

                    }

                    println(
                        " [태풍 경보] : ${
                            elem.getElementsByTagName("typName").item(0).textContent
                        }"
                    )
                    text += "[태풍 경보] : ${
                        elem.getElementsByTagName("typName").item(0).textContent
                    } \n"
                    println(
                        " [태풍 경보] : ${
                            elem.getElementsByTagName("typEn").item(0).textContent
                        }"
                    )
                    text += "[태풍 경보] : ${
                        elem.getElementsByTagName("typEn").item(0).textContent
                    } \n"

                    println("=========${i + 1}=========")
                    text += "${i + 1}번째 태풍 경보 안내 \n"

                    println(
                        "** 안내 : ${
                            elem.getElementsByTagName("fcLocKo").item(0).textContent
                        }"
                    )
                    text += "** 안내 : ${
                        elem.getElementsByTagName("fcLocKo").item(0).textContent
                    } \n"

                    println(
                        "0. 통보문 발표 시각 : ${
                            elem.getElementsByTagName("tmFc").item(0).textContent
                        }"
                    )
                    text += "0. 통보문 발표 시각 : ${
                        elem.getElementsByTagName("tmFc").item(0).textContent
                    } \n"

                    println(
                        "1. 진행 방향 : ${
                            elem.getElementsByTagName("dir").item(0).textContent
                        }"
                    )
                    text += "1. 진행 방향 : ${
                        elem.getElementsByTagName("dir").item(0).textContent
                    } \n"

                    println(
                        "2. 15m/s 예외방향 : ${
                            elem.getElementsByTagName("ed15").item(0).textContent
                        }"
                    )
                    text += "2. 15m/s 예외방향 : ${
                        elem.getElementsByTagName("ed15").item(0).textContent
                    } \n"

                    println(
                        "3. 태풍 분석 시 시간 : ${
                            elem.getElementsByTagName("tm").item(0).textContent
                        }"
                    )
                    text += "3. 태풍 분석 시 시간 : ${
                        elem.getElementsByTagName("tm").item(0).textContent
                    } \n"

                    println("=====================================")

                }
            }
        } catch (e: Exception) {
            Log.d("TTT", "오픈API" + e.toString())
        }
    }
}



===================================

package com.example.dbpfinal

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import android.util.Log
import android.widget.Button
import kotlinx.android.synthetic.main.activity_main.*
import org.w3c.dom.Document
import org.w3c.dom.Node
import org.w3c.dom.Element
import javax.xml.parsers.DocumentBuilderFactory
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.dbpfinal.ui.theme.DbpfinalTheme

var text=""

class MainActivity : AppCompatActivity() {
    // lateinit var binding:ActivityMainBinding;
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val button = findViewById<Button>(R.id.button)

        textView.text = ""

        // [태풍예상정보조회] 요청 변수
        // 키 값
        val key = "leuCQS4rjZ3wEEYZP6uJ7YJn%2F%2FHQBMJ2UtecVeGQ7PI3F0gU%2FzOpGukfXrFYPAp5kw9goRwCYpFdeBmRueD%2FKw%3D%3D\n"
        // 현재 페이지번호
        val pageNo = "&pageNo=1"
        // 한 페이지 결과 수
        val numOfRows ="&numOfRows=10"

        // 응답 자료 형식
        //val dataTyp = "&dataTyp=XML"
        // 서비스명 = 어플명
        val MobileApp = "&MobileApp=TYPHOON SERVICE"

        val dataType = "&dataType=XML"
        // 발표시각
        val tmFc = "&tmFc=202306090400"
        //태풍번호
        val typSeq = "&typSeq=18"
        // API 정보를 가지고 있는 주소
        val url = "http://apis.data.go.kr/1360000/TyphoonInfoService/getTyphoonInfo?serviceKey=leuCQS4rjZ3wEEYZP6uJ7YJn%2F%2FHQBMJ2UtecVeGQ7PI3F0gU%2FzOpGukfXrFYPAp5kw9goRwCYpFdeBmRueD%2FKw%3D%3D&numOfRows=10&pageNo=1&dataType=XML&fromTmFc=20230607&toTmFc=20230607"+key+pageNo+numOfRows+tmFc+typSeq

        // 버튼을 누르면 쓰레드 동작
        button.setOnClickListener {
            // 쓰레드 생성
            val thread = Thread(NetworkThread(url))
            thread.start() // 쓰레드 시작
            thread.join() // 멀티 작업 안되게 하려면 start 후 join 입력

            // 쓰레드에서 가져온 api 정보 텍스트에 뿌려주기
            textView.text = text
        }

    }
}

class NetworkThread(
    var url:String): Runnable {
    override fun run() {
        try {
            val xml: Document =
                DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(url)
            xml.documentElement.normalize()

            //찾고자 하는 데이터가 어느 노드 아래에 있는지 확인
            val list: NodeList = xml.getElementsByTagName("item")

            //list.length-1 만큼 얻고자 하는 태그의 정보를 가져온다
            for (i in 0..list.length - 1) {

                val n: Node = list.item(i)

                if (n.getNodeType() == Node.ELEMENT_NODE) {

                    val elem = n as Element

                    val map = mutableMapOf<String, String>()


                    // 
                    for (j in 0..elem.attributes.length - 1) {

                        map.putIfAbsent(
                            elem.attributes.item(j).nodeName,
                            elem.attributes.item(j).nodeValue
                        )

                    }

                    println("=========${i + 1}=========")
                    text += "${i + 1}번째 태풍 경보 안내 \n"

                    println(
                        "** 안내 : ${
                            elem.getElementsByTagName("fcLocKo").item(0).textContent
                        }"
                    )
                    text += "** 안내 : ${
                        elem.getElementsByTagName("fcLocKo").item(0).textContent
                    } \n"

                    println(
                        "0. 통보문 발표 시각 : ${
                            elem.getElementsByTagName("tmFc").item(0).textContent
                        }"
                    )
                    text += "0. 통보문 발표 시각 : ${
                        elem.getElementsByTagName("tmFc").item(0).textContent
                    } \n"

                    println(
                        "1. 진행 방향 : ${
                            elem.getElementsByTagName("dir").item(0).textContent
                        }"
                    )
                    text += "1. 진행 방향 : ${
                        elem.getElementsByTagName("dir").item(0).textContent
                    } \n"

                    println(
                        "2. 15m/s 예외방향 : ${
                            elem.getElementsByTagName("ed15").item(0).textContent
                        }"
                    )
                    text += "2. 15m/s 예외방향 : ${
                        elem.getElementsByTagName("ed15").item(0).textContent
                    } \n"

                    println(
                        "3. 태풍 분석 시 시간 : ${
                            elem.getElementsByTagName("tm").item(0).textContent
                        }"
                    )
                    text += "3. 태풍 분석 시 시간 : ${
                        elem.getElementsByTagName("tm").item(0).textContent
                    } \n"

                    println("=====================================")

                }
            }
        } catch (e: Exception) {
            Log.d("TTT", "오픈API" + e.toString())
        }
    }
}



============================================================
package com.example.dbpfinal

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import android.util.Log
import android.widget.Button
import kotlinx.android.synthetic.main.activity_main.*
import org.w3c.dom.Document
import org.w3c.dom.Node
import org.w3c.dom.Element
import javax.xml.parsers.DocumentBuilderFactory
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.dbpfinal.ui.theme.DbpfinalTheme

var text=""

class MainActivity : AppCompatActivity() {
    // lateinit var binding:ActivityMainBinding;
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val button = findViewById<Button>(R.id.button)

        textView.text = ""

        // 요청 변수
        // 키 값
        val key = "leuCQS4rjZ3wEEYZP6uJ7YJn%2F%2FHQBMJ2UtecVeGQ7PI3F0gU%2FzOpGukfXrFYPAp5kw9goRwCYpFdeBmRueD%2FKw%3D%3D\n"
        // 현재 페이지번호
        val pageNo = "&pageNo=1"
        // 한 페이지 결과 수
        val numOfRows ="&numOfRows=10"
        
        // 응답 자료 형식
        //val dataTyp = "&dataTyp=XML"
        
        val dataType = "&dataType=XML"
        // 발표시각
        val tmFc = "&tmFc=202306090400"
        //태풍번호
        val typSeq = "&typSeq=18"
        // API 정보를 가지고 있는 주소
        val url = "http://apis.data.go.kr/1360000/TyphoonInfoService/getTyphoonInfo?serviceKey=leuCQS4rjZ3wEEYZP6uJ7YJn%2F%2FHQBMJ2UtecVeGQ7PI3F0gU%2FzOpGukfXrFYPAp5kw9goRwCYpFdeBmRueD%2FKw%3D%3D&numOfRows=10&pageNo=1&dataType=XML&fromTmFc=20230607&toTmFc=20230607"+key+pageNo+numOfRows+tmFc+typSeq

        // 버튼을 누르면 쓰레드 동작
        button.setOnClickListener {
            // 쓰레드 생성
            val thread = Thread(NetworkThread(url))
            thread.start() // 쓰레드 시작
            thread.join() // 멀티 작업 안되게 하려면 start 후 join 입력

            // 쓰레드에서 가져온 api 정보 텍스트에 뿌려주기
            textView.text = text
        }

    }
}

class NetworkThread(
    var url:String): Runnable {
        override fun run() {
            try {
                val xml: Document =
                    DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(url)
                xml.documentElement.normalize()

                //찾고자 하는 데이터가 어느 노드 아래에 있는지 확인
                val list: NodeList = xml.getElementsByTagName("item")

                //list.length-1 만큼 얻고자 하는 태그의 정보를 가져온다
                for (i in 0..list.length - 1) {

                    val n: Node = list.item(i)

                    if (n.getNodeType() == Node.ELEMENT_NODE) {

                        val elem = n as Element

                        val map = mutableMapOf<String, String>()


                        // 
                        for (j in 0..elem.attributes.length - 1) {

                            map.putIfAbsent(
                                elem.attributes.item(j).nodeName,
                                elem.attributes.item(j).nodeValue
                            )

                        }

                        println("=========${i + 1}=========")
                        text += "${i + 1}번 캠핑장 \n"

                        println("1. 주소 : ${elem.getElementsByTagName("addr1").item(0).textContent}")
                        text += "1. 주소 : ${
                            elem.getElementsByTagName("addr1").item(0).textContent
                        } \n"

                        println(
                            "2. 캠핑장 이름 : ${
                                elem.getElementsByTagName("facltNm").item(0).textContent
                            }"
                        )
                        text += "2. 캠핑장 이름 : ${
                            elem.getElementsByTagName("facltNm").item(0).textContent
                        } \n"

                        println("3. 위도 : ${elem.getElementsByTagName("mapX").item(0).textContent}")
                        text += "3. 위도 : ${
                            elem.getElementsByTagName("mapX").item(0).textContent
                        } \n"

                        println("4. 경도 : ${elem.getElementsByTagName("mapY").item(0).textContent}")
                        text += "4. 경도 : ${
                            elem.getElementsByTagName("mapY").item(0).textContent
                        } \n"

                        println(
                            "5. 업종 : ${
                                elem.getElementsByTagName("induty").item(0).textContent
                            }"
                        )
                        text += "5. 업종 : ${
                            elem.getElementsByTagName("induty").item(0).textContent
                        } \n"

                    }
                }
            }catch (e: Exception) {
                Log.d("TTT", "오픈API"+e.toString())
        }
    }

-----------------------------------------

package com.example.dbpfinal

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import android.util.Log
import android.widget.Button
import kotlinx.android.synthetic.main.activity_main.*
import org.w3c.dom.Document
import org.w3c.dom.Node
import org.w3c.dom.Element
import javax.xml.parsers.DocumentBuilderFactory
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.dbpfinal.ui.theme.DbpfinalTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)


        setContent {
            DbpfinalTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    Greeting("Android")
                }
            }
        }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    DbpfinalTheme {
        Greeting("Android")
    }
}
